openapi: 3.0.0
info:
  title: Derpibooru API
  version: 0.0.1
  description: |
    Unofficial api documentation for [https://derpibooru.org](https://derpibooru.org).

    Note that because the Derpibooru api is weird, I won't guarantee that the properties/methods/etc described here will always be correct \[](/rdwut).

    ## From the official docs:
    > ### API
    > Derpibooru provides a JSON API for major site functionality, which can be freely used by anyone wanting to produce tools for the site or other webapps that use the data provided within Derpibooru.
    > ### Licensing
    > Licensing of the API is simple - anyone can use it, users making abusively high numbers of requests may be asked to stop. Your application MUST properly cache, respect server-side cache expiry times. Your client MUST gracefully back off if requests fail (eg non-200 HTTP code), preferably exponentially or fatally.
    >
    > Credit MUST always be given to the site in the form of a link. If images are used, the artist MUST always be credited (if provided) and the original source URL MUST be displayed alongside the image, either in textual form or as a link. A link to the Derpibooru page is optional but recommended; we recommend the derpibooru.org domain as a canonical domain. The https protocol MUST be specified on all URIs; Derpibooru does not support plaintext HTTP connections.
    >
    > ### Accessing the API
    > Most methods support API access by appending the extension .json to a URL. For requests that require authentication, the URL parameter "key" should be appended. This key provides limited access to a user's account. This key can be found by users on their account page. For instance, to access a user"s watched feed, the request /images/watched.json?key=-Od-dTiwcf9dN2djrhlN would be made.
    >
    > Methods dealing with large feeds are paginated; the "page" parameter controls the page you're on. The number of images per page can be set with the "perpage" parameter. The default is 15 unless you use your key and have changed the "Images per page" option on the settings page.
    >
    > Search endpoints are controlled by the current user's filter (or the default, if no key is supplied); if you wish to use a custom filter, you can use the "filter_id" parameter.

    ## Overview
    Since the api is a bit funny and has some quirks, I'll clarify and explain some things myself:

    ### Endpoints v1
    Derpibooru's API v1 endpoints are the same as normal pages. You can get API data from MOST pages by appending `.json` to the URL or adding an `Accept: application/json` HTTP header to your request. For example: To get the data for image 1 ([https://derpibooru.org/1](https://derpibooru.org/1)), you would make a request to [https://derpibooru.org/1.json](https://derpibooru.org/1.json).

    ### Endpoints v2
    A few years ago, v2 of the API started showing up, using a semi-standard url structure: `/api/v2/{entity}/{endpoint}.json`. It's never been documented and is still pretty inconsistent.

    ### Endpoints v3
    API v3 has been mentioned a few times but is just wishful thinking as far as I know... [[ref1]](https://derpibooru.org/meta/feature-suggestions-and-discussion/post/193607#post_193607) [[ref2]](https://derpibooru.org/meta/api-update/post/2354594#post_2354594)

    ### Authentication
    Some requests, like getting a user's watched images, require you to be authenticated as a user. This is done by adding a `key` URL parameter with the user's API Key. For example: [https://derpibooru.org/images/watched.json?key=-Od-dTiwcf9dN2djrhlN](https://derpibooru.org/images/watched.json?key=-Od-dTiwcf9dN2djrhlN).
    API Keys provide limited access to a user's account and can be found on their account page. Be careful not to leak it since it the only way of changing it is to ask for it to be manually reset [[ref1]](https://derpibooru.org/meta/quick-question-about-apis-and-login/post/2636861#post_2636861) [[ref2]](https://derpibooru.org/meta/derpibooru-dl-stopped-working-possible-change-in-how-api-results-are-returned/post/3628439#post_3628439). (Note you can also use the same auth cookies from the website since you'd be logged in that way too)

    ### Filters
    All image searches are limited by the current filter. Authenticated requests will always use the currently selected filter for that user. Unauthenticated requests will default to the "default" filter, but a different one can be chosen by using the `filter_id` URL Parameter. You can use any filter with this parameter - even ones that aren't public.

    ### Pagination
    Many results on Derpibooru are paginated. The `page` URL Parameter can be used to to control what page you're on. Some endpoints allow the use of a `perpage` URL Parameter to specify how many results to show per page, though this is rather inconsistent (some endpoints use the current user's settings or only allow the default).

    ### TODO:
    This is just a list of endpoints I've found that I need to document, you can ignore this •c•
     - [X] GET https://derpibooru.org/images.json
     - [X] GET https://derpibooru.org/images/page/1.json
        - Apparently used to have an &fav=true parameter? [[ref]](https://derpibooru.org/meta/breaking-api-changes/post/1295882#post_1295882)
     - [X] GET https://derpibooru.org/images/{ImageId}/comments.json?page=2
     - [X] GET https://derpibooru.org/images/{ImageId}/comments_home.json
     - [X] GET https://derpibooru.org/images/{ImageId}/tag_changes.json
     - [X] GET https://derpibooru.org/filters.json
     - GET https://derpibooru.org/filters/{FilterId}.json
     - GET https://derpibooru.org/channels.json
     - GET https://derpibooru.org/channels/{ChannelId}.json
     - GET https://derpibooru.org/comment/{CommentId}.json
     - GET https://derpibooru.org/messages.json
     - GET https://derpibooru.org/messages/{MessageSlug}.json
     - GET https://derpibooru.org/messages/hide/{MessageId}
     - POST https://derpibooru.org/messages/hide_batch
        - Form!
     - GET https://derpibooru.org/posts/posted.json
     - GET https://derpibooru.org/dnp/{DnpId}.json
     - GET https://derpibooru.org/tags.json
     - GET https://derpibooru.org/tags/ratings.json
     - GET https://derpibooru.org/tags/aliases.json
     - GET https://derpibooru.org/tags/implied.json
     - GET https://derpibooru.org/tags/{TagNameOrId}.json
     - GET https://derpibooru.org/tags/autocomplete.json?term=pon
       - term must be 3 or more chars
     - GET https://derpibooru.org/{ForumName}.json
     - GET https://derpibooru.org/{ForumName}/{TopicName}.json
     - GET https://derpibooru.org/{ForumName}/{TopicName}/{PageNumber}.json
     - GET https://derpibooru.org/{ForumName}/{TopicName}/post/{PostId}.json
       - returns the page the post is on, not the post itself
     - GET https://derpibooru.org/forums/{ForumName}.json
     - GET https://derpibooru.org/forums/{ForumName}/{TopicName}.json
     - GET https://derpibooru.org/lists.json?last=24h
       - last defaults to 3d
     - GET https://derpibooru.org/lists/recent_comments.json
     - GET https://derpibooru.org/galleries.json
     - GET https://derpibooru.org/galleries/{UserNameOrId}.json
     - GET https://derpibooru.org/galleries/{UserNameOrId}/{GalleryId}.json
       - UserNameOrId is not required and will redirect to the correct one
     - GET https://derpibooru.org/api/v2/tags/fetch_many.json?ids[]={TagId1}&ids[]={TagId2...}
     - GET https://derpibooru.org/api/v2/tags/show.json?id={TagId}
     - GET https://derpibooru.org/api/v2/users/fetch_many.json?ids[]={UserId1}&ids[]={UserId2...}
     - GET https://derpibooru.org/api/v2/users/show.json?id={UserId}
     - GET https://derpibooru.org/api/v2/images/show.json?ids=1,2,3
       - This one also works without the .json
     - GET https://derpibooru.org/api/v2/images/show.json?id_numbers=841846,913527
       - I don't think this works anymore
     - GET https://derpibooru.org/api/v2/notifications/unread.json
     - PUT https://derpibooru.org/api/v2/notifications/watch?
     - PUT https://derpibooru.org/api/v2/notifications/unwatch?
     - GET https://derpibooru.org/api/v2/interactions/interacted.json?class=Image&ids=1725734
       - Used to be https://derpibooru.org/api/v2/interactions/interacted.json?class=Image&ids=556feeed636872357b110d00, looks like the id format changed sometime? Maybe [here](https://derpibooru.org/meta/api-update/post/2354568#post_2354568)?
     - PUT https://derpibooru.org/api/v2/interactions/fave
       - `> {"class":"Image","id":"1722317","value":"true","_method":"PUT"}`
       - `< {"score":758,"favourites":581,"upvotes":758,"downvotes":0,"votes":758}`
       - value = true | false
       - Reportedly also works in the format /api/v2/interactions/fave?class=Image&id=image_id&value=true - will need tested [[ref]](https://derpibooru.org/meta/userscript-derpibooru-image-slideshow/post/1276458#post_1276458)
     - PUT https://derpibooru.org/api/v2/interactions/vote
       - `> {"class":"Image","id":"1696887","value":"down","_method":"PUT"}`
       - `< {"score":170,"favourites":114,"upvotes":177,"downvotes":7,"votes":184}`
       - value = up | down | false
     - PUT https://derpibooru.org/api/v2/interactions/hide
       - `> {"class":"Image","id":"1702318","value":"true","_method":"PUT"}`
       - `< {"score":4,"favourites":18,"upvotes":23,"downvotes":19,"votes":42}`
       - value = true | false

    ## Client Libraries:
     - [node-derpi](https://github.com/BytewaveMLP/node-derpi) (node.js)
     - [DerPyBooru](https://github.com/joshua-stone/DerPyBooru) (Python)
     - [derpigo](https://github.com/Xe/derpigo) (Go)

    ## Other Links:

  termsOfService: https://derpibooru.org/pages/rules
externalDocs:
  description: Derpibooru's official api docs (good luck)
  url: https://derpibooru.org/pages/api
servers:
 - url: https://derpibooru.org
   description: Main canonical domain
 - url: https://trixiebooru.org
   description: Great and powerfull alternate domain.
tags:
- name: Images
- name: Users
- name: Tags
- name: Comments
- name: Lists
paths:
  /images.json:
    get:
      tags:
      - Images
      summary: Gets a list of images.
      description: Gets a list of images from the index. You can constrain your results by using the parameters offered here, but **you'd be better off using `/search.json`** since it's a lot more dynamic and robust!
      operationId: getIndexImages
      parameters:
      - name: constraint
        in: query
        description: The type of field to search and sort by.
        required: false
        schema:
          type: string
          enum: [id, updated, created]
          description: |
            The type of field to constrain.

            Options:
             * `id`  -  To constrain by Id number.
             * `updated` - To constrain by last update time.
             * `created` - To constrain by image creation time.
      - name: gt
        in: query
        description: When specified, filters the results so that the constrained field is greater than this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: gte
        in: query
        description: When specified, filters the results so that the constrained field is greater than or equal to this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: lt
        in: query
        description: When specified, filters the results so that the constrained field is less than this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: lte
        in: query
        description: When specified, filters the results so that the constrained field is less than or equal to this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: order
        in: query
        description: The order to sort the results in. Either `a` for ascending or `d` for descending.  **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          enum: [a, d]
          description: |
            The sort order.

            Options:
             * `a` - ascending.
             * `d` - descending.
      - name: deleted
        in: query
        description: If present, include deleted images. Can be any value.
        allowEmptyValue: true
        schema:
          type: string
      - name: page
        in: query
        description: The page offset. (Items per page is determined by the current user's settings, or the default of 15). **Does not work if other parameters are set!**
        required: false
        schema:
          type: number
          description: The page number.
      - name: random_image
        in: query
        description: Documented as ordering the images randomly, however does not work in my testing.
        allowEmptyValue: true
        deprecated: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/Image'
                      - $ref: '#/components/schemas/DeletedImage'
                  interactions:
                    description: An array of interactions the current user has done to an image.
                    type: array
                    items:
                      $ref: '#/components/schemas/Interaction'
  /images/page/{PageNumber}.json:
    get:
      tags:
      - Images
      summary: Gets a list of images.
      description: Gets a list of images from the index. You can constrain your results by using the parameters offered here, but **you'd be better off using `/search.json`** since it's a lot more dynamic and robust!
      operationId: getIndexImagesWithPage
      parameters:
      - name: PageNumber
        in: path
        description: The page offset. (Items per page is determined by the current user's settings, or the default of 15). **Does not work if other parameters are set!**
        required: true
        schema:
          type: number
          description: The page number.
      - name: constraint
        in: query
        description: The type of field to search and sort by.
        required: false
        schema:
          type: string
          enum: [id, updated, created]
          description: |
            The type of field to constrain.

            Options:
             * `id`  -  To constrain by Id number.
             * `updated` - To constrain by last update time.
             * `created` - To constrain by image creation time.
      - name: gt
        in: query
        description: When specified, filters the results so that the constrained field is greater than this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: gte
        in: query
        description: When specified, filters the results so that the constrained field is greater than or equal to this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: lt
        in: query
        description: When specified, filters the results so that the constrained field is less than this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: lte
        in: query
        description: When specified, filters the results so that the constrained field is less than or equal to this value. **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          description: The value to filter by.
      - name: order
        in: query
        description: The order to sort the results in. Either `a` for ascending or `d` for descending.  **Requires the `constraint` parameter.**
        required: false
        schema:
          type: string
          enum: [a, d]
          description: |
            The sort order.

            Options:
             * `a` - ascending.
             * `d` - descending.
      - name: deleted
        in: query
        description: If present, include deleted images. Can be any value.
        allowEmptyValue: true
        schema:
          type: string
      - name: random_image
        in: query
        description: Documented as ordering the images randomly, however does not work in my testing.
        allowEmptyValue: true
        deprecated: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      oneOf:
                      - $ref: '#/components/schemas/Image'
                      - $ref: '#/components/schemas/DeletedImage'
                  interactions:
                    description: An array of interactions the current user has done to an image.
                    type: array
                    items:
                      $ref: '#/components/schemas/Interaction'
  /{ImageId}.json:
    get:
      tags:
      - Images
      summary: Gets an image.
      description: Gets the details for an image from it's Id.
      operationId: getImageById
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                oneOf:
                - $ref: '#/components/schemas/ImageWithInteractions'
                - $ref: '#/components/schemas/DeletedImage'
        '404':
          description: Image not found.
  /images/{ImageId}.json:
    get:
      tags:
      - Images
      summary: Gets an image.
      description: Gets the details for an image from it's Id. This endpoint is the same as `/{ImageId}.json`
      operationId: getImageById2
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                oneOf:
                - $ref: '#/components/schemas/ImageWithInteractions'
                - $ref: '#/components/schemas/DeletedImage'
        '404':
          description: Image not found.
  /images/{ImageId}/comments_home.json:
    get:
      tags:
      - Images
      - Comments
      summary: Gets the first page of an image's comments.
      description: Gets the first page of an image's comments.
      operationId: getImageComments
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get the  comments for.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    $ref: '#/components/schemas/Comment'
                  total:
                    description: The total number of comments an image has.
                    type: integer
                    minimum: 0
  /images/{ImageId}/comments.json:
    get:
      tags:
      - Images
      - Comments
      summary: Gets an image's comments.
      description: Gets an image's comments.
      operationId: getImageCommentsPaged
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get the comments for.
        required: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number.
        required: false
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    $ref: '#/components/schemas/Comment'
                  total:
                    description: The total number of comments an image has.
                    type: integer
                    minimum: 0
  /images/{ImageId}/tag_changes.json:
    get:
      tags:
      - Images
      - Tags
      summary: Gets an image's tag changes.
      description: Gets an image's tag changes. **These results are not ordered!**
      operationId: getImageTagChanges
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get the comments for.
        required: true
        schema:
          type: integer
      - name: page
        in: query
        description: The page number.
        required: false
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagChange'
  /filters.json:
    get:
      tags:
      - Filters
      summary: Gets or searches for available filters.
      description: Gets or searches for available filters.
      operationId: getFilters
      parameters:
      - name: fq
        in: query
        description: An optional search query. Results will be in `search_filters`.
        required: false
        schema:
          type: string
      - name: search_desc
        in: query
        description: If present, search through filter descriptions. Can be any value.
        allowEmptyValue: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  system_filters:
                    description: An array of the system filters.
                    type: array
                    items:
                      $ref: '#/components/schemas/Filter'
                  user_filters:
                    description: An array of the filters the current user created.
                    type: array
                    items:
                      $ref: '#/components/schemas/Filter'
                  search_filters:
                    description: An array of filter search results.
                    type: array
                    items:
                      $ref: '#/components/schemas/Filter'
  /profiles/{UserNameOrId}:
    get:
      tags:
      - Users
      summary: Gets a User's profile.
      description: |
        Gets a User's profile by their Name or Id.

        **Warning:** Names take precedence over Ids, so a request for `1234` might actually return the User *named* `1234` instead of the User with Id `1234`! **Use the v2 API if you need to get a user by their Id!**
      operationId: getUserProfile
      parameters:
      - name: UserNameOrId
        in: path
        description: The Name or Id of the User to get.
        required: true
        schema:
          oneOf:
          - type: integer
          - type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
components:
  schemas:
    Image:
      description: An image.
      type: object
      properties:
        id:
          type: integer
          description: The image's id.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was created.
        updated_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was uploaded.
        first_seen_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was first seen.
        score:
          type: integer
          description: The cumulative score of an image (upvotes - downvotes).
        comment_count:
          type: integer
          description: The number of comments an image has.
          minimum: 0
        width:
          type: integer
          description: The width of an image in pixels.
          minimum: 0
        height:
          type: integer
          description: The height of an image in pixels.
          minimum: 0
        file_name:
          type: string
          description: The original filename of an image.
        description:
          type: string
          description: The description of an image (Using derpibooru's formatting syntax).
        uploader:
          type: string
          description: The name of the uploader.
        uploader_id:
          type: integer
          nullable: true
          description: The id of the uploader, or `null` if it was uploaded anonymously.
        image:
          type: string
          format: uri
          description: The canonical direct url for the image.
        upvotes:
          type: integer
          description: The number of upvotes the image has.
          minimum: 0
        downvotes:
          type: integer
          description: The number of downvotes the image has.
          minimum: 0
        faves:
          type: integer
          description: The number of users who have favorited the image.
          minimum: 0
        tags:
          type: string
          description: A string containing a list of tags for the image.
        tag_ids:
          type: array
          description: An array of Tag Ids for the image.
          items:
            type: integer
            description: The Id of the Tag
          uniqueItems: true
        aspect_ratio:
          type: number
          description: The aspect ratio of the image.
        original_format:
          type: string
          description: The original format of the image (jpeg/png/svg).
        mime_type:
          type: string
          description: The original mime type of the image.
        sha512_hash:
          type: string
          format: sha512
          description: The sha512 hash of the image.
        orig_sha512_hash:
          type: string
          format: sha512
          description: The original sha512 hash of the image.
        source_url:
          type: string
          format: uri
          description: The source url of the image.
        representations:
          type: object
          properties:
            thumb_tiny:
              type: string
              format: uri
              description: The tiny thumbnail for the image.
            thumb_small:
              type: string
              format: uri
              description: The small thumbnail for the image.
            thumb:
              type: string
              format: uri
              description: The thumbnail for the image.
            small:
              type: string
              format: uri
              description: The small preview of the image.
            medium:
              type: string
              format: uri
              description: The medium preview of the image.
            large:
              type: string
              format: uri
              description: The large preview of the image.
            tall:
              type: string
              format: uri
              description: The tall preview of the image.
            full:
              type: string
              format: uri
              description: The full image.
        is_rendered:
          type: boolean
          description: Whether or not the image's previews/thumbnails have been rendered.
        is_optimized:
          type: boolean
          description: Whether or not the image's previews/thumbnails have been optimized.
    ImageWithInteractions:
      allOf:
      - $ref: '#/components/schemas/Image'
      - type: object
        properties:
          interactions:
            description: An array of interactions the current user has done to an image.
            type: array
            items:
              $ref: '#/components/schemas/Interaction'
    DeletedImage:
      description: An image that has been deleted or merged.
      type: object
      properties:
        id:
          type: integer
          description: The image's id.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was created.
        updated_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was uploaded.
        first_seen_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was first seen.
        duplicate_of:
          type: integer
          description: The id of the image this was a duplicate of.
        uploader_id:
          type: integer
          nullable: true
          description: The id of the uploader, or `null` if it was uploaded anonymously.
    Interaction:
      description: An interaction.
      type: object
      properties:
        id:
          type: integer
          description: The id of the interaction.
        interaction_type:
          type: string
          enum: [faved, voted, hidden]
          description: |
            The type of interaction.

            Options:
             * `faved`  - The user favorited the image.
             * `voted`  - The user voted on the image.
             * `hidden` - The user hid the image.
        value:
          type: string
          nullable: true
          description: The value of the interaction. (For example, "voted" interaction types can have a value of "up" or "down")
        user_id:
          type: integer
          description: The id of the user who made the interaction.
        image_id:
          type: integer
          description: The id of the image which the interaction is for.
    User:
      description: A user's profile.
      type: object
      properties:
        id:
          type: number
          description: The id of the user.
        name:
          type: string
          description: The name of the user.
        slug:
          type: string
          format: uri
          description: The url slug of the user.
        role:
          type: string
          enum: [admin, moderator, user]
          description: |
            The role of the user.

            Options:
             * `admin` - A site Administrator.
             * `moderator` - A site Moderator.
             * `user` - A normal User.
        description:
          type: string
          description: The user's profile description.
        avatar_url:
          type: string
          format: uri
          description: The user's avatar.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user was created.
        comment_count:
          type: number
          description: The number of comments the user has made.
          minimum: 0
        uploads_count:
          type: number
          description: The number of images the user has uploaded.
          minimum: 0
        post_count:
          type: number
          description: The number of form posts the user has made.
          minimum: 0
        topic_count:
          type: number
          description: The number of forum topics the user has started.
          minimum: 0
        links:
          type: "array"
          description: An array of links connecting this user to their artist tags/etc.
          items:
            $ref: '#/components/schemas/UserLink'
        awards:
          type: "array"
          description: An array of awards this user has earned.
          items:
            $ref: '#/components/schemas/UserAward'
    UserLink:
      description: Links a user to a tag. From the web interface, it looks like it should have a url as well but it doesn't include that for some reason?
      type: object
      properties:
        user_id:
          type: number
          description: The id of the user.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user link was created.
        state:
          type: string
          enum: [verified, unverified]
          description: |
            The state of the link.

            Options:
             * `verified`  - The link has been verified.
             * `unverified?` - The link has been verified. (I'm guessing on this one - someone should make a new link and test this for me :P)
        tag_id:
          type: number
          description: The id of the tag.
    UserAward:
      description: An award for a user. Also known as a profile badge.
      type: object
      properties:
        image_url:
          type: string
          format: uri
          description: The award's icon.
        title:
          type: string
          description: The name of the award.
        label:
          type: string
          nullable: true
          description: A short description of the award.
        id:
          type: number
          description: The id of the user award.
        awarded_on:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user was given the award.
    Comment:
      description: A comment on an image.
      type: object
      properties:
        id:
          type: number
          description: The id of the comment.
        body:
          type: string
          description: The body of the comment.
        author:
          type: string
          description: The name of the user who wrote the comment.
        image_id:
          type: integer
          description: The id of the image the comment is on.
        posted_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the comment was posted.
        deleted:
          type: boolean
          description: Whether or not the comment has been deleted.
    TagChange:
      description: A tag change on an image.
      type: object
      properties:
        added:
          type: boolean
          description: Whether the tag was added or removed (`true` = added, `false` = removed).
        id:
          type: number
          description: The id of the tag change.
        image_id:
          type: integer
          description: The id of the image the tag was changed on.
        tag_name:
          type: string
          nullable: true
          description: The name of the tag that was added or removed. Could also be null for some reason.
        user:
          type: string
          description: The name of the user who changed the tag.
    Filter:
      description: A search filter.
      type: object
      properties:
        id:
          type: number
          description: The id of the filter.
        name:
          type: string
          description: The name of the filter.
        description:
          type: string
          description: The description of the filter.
        hidden_tag_ids:
          type: array
          description: An array of tag ids that are hidden.
          items:
            type: number
            description: The hidden tag's id.
        spoilered_tag_ids:
          type: array
          description: An array of tag ids that are spoilered.
          items:
            type: number
            description: The spoilered tag's id.
        spoilered_tags:
          type: array
          description: An array of tag names that are spoilered.
          items:
            type: string
            description: The spoilered tag's name.
        hidden_tags:
          type: array
          description: An array of tag namess that are hidden.
          items:
            type: string
            description: The hidden tag's name.
        hidden_complex:
          type: string
          description: A complex filter for images to hide.
        spoilered_complex:
          type: string
          description: A complex filter for images to spoiler.
        public:
          type: boolean
          description: Whether or not the filter is public.
        system:
          type: boolean
          description: Whether or not the filter is a system filter.
        user_count:
          type: integer
          description: The number of users that are using the filter.
          minimum: 0
        user_id:
          type: number
          description: The id of the user who made the filter.
          nullable: true
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: key
