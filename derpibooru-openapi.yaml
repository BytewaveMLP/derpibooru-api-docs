openapi: 3.0.0
info:
  title: Derpibooru API
  version: 0.0.1
  description: |
    Unofficial api documentation for [https://derpibooru.org](https://derpibooru.org).

    Note that because the Derpibooru api is weird, I won't guarantee that the properties/methods/etc described here will always be correct \[](/rdwut).

    ## From the official docs:
    > ### API
    > Derpibooru provides a JSON API for major site functionality, which can be freely used by anyone wanting to produce tools for the site or other webapps that use the data provided within Derpibooru.
    > ### Licensing
    > Licensing of the API is simple - anyone can use it, users making abusively high numbers of requests may be asked to stop. Your application MUST properly cache, respect server-side cache expiry times. Your client MUST gracefully back off if requests fail (eg non-200 HTTP code), preferably exponentially or fatally.
    >
    > Credit MUST always be given to the site in the form of a link. If images are used, the artist MUST always be credited (if provided) and the original source URL MUST be displayed alongside the image, either in textual form or as a link. A link to the Derpibooru page is optional but recommended; we recommend the derpibooru.org domain as a canonical domain. The https protocol MUST be specified on all URIs; Derpibooru does not support plaintext HTTP connections.
    >
    > ### Accessing the API
    > Most methods support API access by appending the extension .json to a URL. For requests that require authentication, the URL parameter "key" should be appended. This key provides limited access to a user"s account. This key can be found by users on their account page. For instance, to access a user"s watched feed, the request /images/watched.json?key=-Od-dTiwcf9dN2djrhlN would be made.
    >
    > Methods dealing with large feeds are paginated; the "page" parameter controls the page you're on. The number of images per page can be set with the "perpage" parameter. The default is 15 unless you use your key and have changed the "Images per page" option on the settings page.
    >
    > Search endpoints are controlled by the current user's filter (or the default, if no key is supplied); if you wish to use a custom filter, you can use the "filter_id" parameter.

    ## Client Libraries:
     - [node-derpi](https://github.com/BytewaveMLP/node-derpi) (node.js)
     - [DerPyBooru](https://github.com/joshua-stone/DerPyBooru) (Python)
     - [derpigo](https://github.com/Xe/derpigo) (Go)

    ## Other Links:

  termsOfService: https://derpibooru.org/pages/rules
externalDocs:
  description: Derpibooru's official api docs (good luck)
  url: https://derpibooru.org/pages/api
servers:
 - url: https://derpibooru.org
   description: Main canonical domain
 - url: https://trixiebooru.org
   description: Great and powerfull alternate domain.
tags:
- name: Images
- name: Users
- name: Tags
- name: Comments
- name: Lists
paths:
  /{ImageId}.json:
    get:
      tags:
      - Images
      summary: Gets an image by Id.
      description: Gets the details for an image from it's Id.
      operationId: getImageById
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: Image not found.
  /images/{ImageId}.json:
    get:
      tags:
      - Images
      summary: Gets an image by Id.
      description: Gets the details for an image from it's Id. This endpoint is the same as `/{ImageId}.json`
      operationId: getImageById2
      parameters:
      - name: ImageId
        in: path
        description: The Id of the image to get.
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: Image not found.
  /profiles/{UserNameOrId}:
    get:
      tags:
      - Users
      summary: Gets a User's profile.
      description: |
        Gets a User's profile by their Name or Id.

        **Warning:** Names take precedence over Ids, so a request for `1234` might actually return the User *named* `1234` instead of the User with Id `1234`! The current suggested workaround is to double check that the response's `id` matches the requested Id and if not, retry with a 0 appended to the requested Id until you get the right user :)
      operationId: getUserProfile
      parameters:
      - name: UserNameOrId
        in: path
        description: The Name or Id of the User to get.
        required: true
        schema:
          oneOf:
          - type: integer
          - type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
components:
  schemas:
    Image:
      description: An image.
      type: object
      properties:
        id:
          type: integer
          description: The image's id.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was created.
        updated_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was uploaded.
        first_seen_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the image was first seen.
        score:
          type: integer
          description: The cumulative score of an image (upvotes - downvotes).
        comment_count:
          type: integer
          description: The number of comments an image has.
        width:
          type: integer
          description: The width of an image in pixels.
        height:
          type: integer
          description: The height of an image in pixels.
        file_name:
          type: string
          description: The original filename of an image.
        description:
          type: string
          description: The description of an image (Using derpibooru's formatting syntax).
        uploader:
          type: string
          description: The name of the uploader.
        uploader_id:
          type: integer
          nullable: true
          description: The id of the uploader, or `null` if it was uploaded anonymously.
        image:
          type: string
          format: uri
          description: The canonical direct url for the image.
        upvotes:
          type: integer
          description: The number of upvotes the image has.
        downvotes:
          type: integer
          description: The number of downvotes the image has.
        faves:
          type: integer
          description: The number of users who have favorited the image.
        tags:
          type: string
          description: A string containing a list of tags for the image.
        tag_ids:
          type: array
          description: An array of Tag Ids for the image.
          items:
            type: integer
            description: The Id of the Tag
          uniqueItems: true
        aspect_ratio:
          type: number
          description: The aspect ratio of the image.
        original_format:
          type: string
          description: The original format of the image (jpeg/png/svg).
        mime_type:
          type: string
          description: The original mime type of the image.
        sha512_hash:
          type: string
          format: sha512
          description: The sha512 hash of the image.
        orig_sha512_hash:
          type: string
          format: sha512
          description: The original sha512 hash of the image.
        source_url:
          type: string
          format: uri
          description: The source url of the image.
        representations:
          type: object
          properties:
            thumb_tiny:
              type: string
              format: uri
              description: The tiny thumbnail for the image.
            thumb_small:
              type: string
              format: uri
              description: The small thumbnail for the image.
            thumb:
              type: string
              format: uri
              description: The thumbnail for the image.
            small:
              type: string
              format: uri
              description: The small preview of the image.
            medium:
              type: string
              format: uri
              description: The medium preview of the image.
            large:
              type: string
              format: uri
              description: The large preview of the image.
            tall:
              type: string
              format: uri
              description: The tall preview of the image.
            full:
              type: string
              format: uri
              description: The full image.
        is_rendered:
          type: boolean
          description: Whether or not the image's previews/thumbnails have been rendered.
        is_optimized:
          type: boolean
          description: Whether or not the image's previews/thumbnails have been optimized.
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/Interaction'
          description: An array of interactions the current user has done to an image.
    Interaction:
      description: An interaction.
      type: object
      properties:
        id:
          type: integer
          description: The id of the interaction.
        interaction_type:
          type: string
          enum: [faved, voted, hidden]
          description: |
            The type of interaction.

            Options:
             * `faved`  - The user favorited the image.
             * `voted`  - The user voted on the image.
             * `hidden` - The user hid the image.
        value:
          type: string
          nullable: true
          description: The value of the interaction. (For example, "voted" interaction types can have a value of "up" or "down")
        user_id:
          type: integer
          description: The id of the user who made the interaction.
        image_id:
          type: integer
          description: The id of the image which the interaction is for.
    User:
      description: A user's profile.
      type: object
      properties:
        id:
          type: number
          description: The id of the user.
        name:
          type: string
          description: The name of the user.
        slug:
          type: string
          format: uri
          description: The url slug of the user.
        role:
          type: string
          enum: [admin, moderator, user]
          description: |
            The role of the user.

            Options:
             * `admin` - A site Administrator.
             * `moderator` - A site Moderator.
             * `user` - A normal User.
        description:
          type: string
          description: The user's profile description.
        avatar_url:
          type: string
          format: uri
          description: The user's avatar.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user was created.
        comment_count:
          type: number
          description: The number of comments the user has made.
        uploads_count:
          type: number
          description: The number of images the user has uploaded.
        post_count:
          type: number
          description: The number of form posts the user has made.
        topic_count:
          type: number
          description: The number of forum topics the user has started.
        links:
          type: "array"
          items:
            $ref: '#/components/schemas/UserLink'
        awards:
          type: "array"
          items:
            $ref: '#/components/schemas/UserAward'
            type: "object"
    UserLink:
      description: Links a user to a tag. From the web interface, it looks like it should have a url as well but it doesn't include that for some reason?
      type: object
      properties:
        user_id:
          type: number
          description: The id of the user.
        created_at:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user link was created.
        state:
          type: string
          enum: [verified, unverified]
          description: |
            The state of the link.

            Options:
             * `verified`  - The link has been verified.
             * `unverified?` - The link has been verified. (I'm guessing on this one - someone should make a new link and test this for me :P)
        tag_id:
          type: number
          description: The id of the tag.
    UserAward:
      description: An award for a user. Also known as a profile badge.
      type: object
      properties:
        image_url:
          type: string
          format: uri
          description: The award's icon.
        title:
          type: string
          description: The name of the award.
        label:
          type: string
          nullable: true
          description: A short description of the award.
        id:
          type: number
          description: The id of the user award.
        awarded_on:
          type: string
          format: date-time
          description: An ISO 8601 date string representing when the user was given the award.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: key


